"use strict";
require('rxjs/add/operator/cache');
require('rxjs/add/operator/mergeMap');
require('rxjs/add/observable/throw');
var Observable_1 = require('rxjs/Observable');
var Notify = (function () {
    function Notify(notificationConstructor, globalOptions, permission$) {
        this.notificationConstructor = notificationConstructor;
        this.globalOptions = globalOptions;
        this._permission$ = permission$.cache();
    }
    Notify.prototype.requestPermission = function () {
        return this._permission$;
    };
    Notify.prototype._createNotificationObservable = function (title, _options) {
        var _this = this;
        var options = Object.assign.apply(Object, [{}].concat(this.globalOptions, [_options]));
        return new Observable_1.Observable(function (subscriber) {
            var notification = new _this.notificationConstructor(title, options);
            var CLOSE_NOTIFICATION = notification.close.bind(notification);
            notification.close = function () { CLOSE_NOTIFICATION(); subscriber.complete(); };
            notification.onclick = function () { return subscriber.next(notification); };
            notification.onerror = function () { return subscriber.error(notification); };
            notification.onclose = function () { return subscriber.complete(); };
            return CLOSE_NOTIFICATION;
        });
    };
    Notify.prototype.open = function (title, options) {
        var _this = this;
        return this.requestPermission().mergeMap(function (permission) {
            if (!permission) {
                return Observable_1.Observable.throw(new Error('Permission Denied: You do not have permission to open a notification.'));
            }
            return _this._createNotificationObservable(title, options);
        });
    };
    return Notify;
}());
exports.Notify = Notify;
