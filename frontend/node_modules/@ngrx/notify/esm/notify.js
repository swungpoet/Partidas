import 'rxjs/add/operator/cache';
import 'rxjs/add/operator/mergeMap';
import 'rxjs/add/observable/throw';
import { Observable } from 'rxjs/Observable';
export class Notify {
    constructor(notificationConstructor, globalOptions, permission$) {
        this.notificationConstructor = notificationConstructor;
        this.globalOptions = globalOptions;
        this._permission$ = permission$.cache();
    }
    requestPermission() {
        return this._permission$;
    }
    _createNotificationObservable(title, _options) {
        const options = Object.assign({}, ...this.globalOptions, _options);
        return new Observable((subscriber) => {
            const notification = new this.notificationConstructor(title, options);
            const CLOSE_NOTIFICATION = notification.close.bind(notification);
            notification.close = () => { CLOSE_NOTIFICATION(); subscriber.complete(); };
            notification.onclick = () => subscriber.next(notification);
            notification.onerror = () => subscriber.error(notification);
            notification.onclose = () => subscriber.complete();
            return CLOSE_NOTIFICATION;
        });
    }
    open(title, options) {
        return this.requestPermission().mergeMap(permission => {
            if (!permission) {
                return Observable.throw(new Error('Permission Denied: You do not have permission to open a notification.'));
            }
            return this._createNotificationObservable(title, options);
        });
    }
}
