{"version":3,"sources":["template.ts"],"names":[],"mappings":";AAAA;;;;;;;;;;;GAWG;;AAEH,iDAAiD;AAEjD,sCAOuB;AAEvB,iDAAiD;AACjD,iCAA+C;AAC/C,0CAA4C;AAE/B,QAAA,yBAAA,GAA4B,qBAAA,CAAsB;AAE/D;IAAA;IAIA,CAAC;IAAD,iBAAC;AAAD,CAJA,AAIC,IAAA;AAJY,gCAAU;AAOvB;IAOI,6BAAoB,WAA6B,EACrC,gBAAkC,EAC1C,YAA4B,EACpB,MAAc;QAHN,gBAAW,GAAX,WAAW,CAAkB;QACrC,qBAAgB,GAAhB,gBAAgB,CAAkB;QAElC,WAAM,GAAN,MAAM,CAAQ;QACtB,YAAY,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC;IACnC,CAAC;IAVD,sBAAI,6CAAY;aAAhB,UAAiB,KAAK;YAClB,IAAI,CAAC,IAAI,GAAG,KAAK,CAAC;QACtB,CAAC;;;OAAA;IAAA,CAAC;IAUF,oCAAM,GAAN,UAAO,UAAsB;QACzB,IAAI,SAAS,GAAG,IAAI,CAAC,gBAAgB,CAAC,kBAAkB,CAAC,IAAI,CAAC,WAAW,EAAE;YACvE,WAAW,EAAE,UAAU,CAAC,KAAK;YAC7B,KAAK,EAAE,UAAU,CAAC,KAAK;SAC1B,CAAC,CAAC;QACH,IAAI,SAAS,GAAG,kBAAU,CAAC,UAAU,CAAC,SAAS,CAAC,CAAC;QACjD,EAAE,CAAC,CAAC,UAAU,CAAC,SAAS,CAAC,CAAC,CAAC;YACvB,SAAS,CAAC,SAAS,CAAC,OAAO,CAAC,UAAC,OAAO;gBAChC,SAAS,CAAC,WAAW,CAAC,OAAO,CAAC,CAAC;YACnC,CAAC,CAAC,CAAC;QACP,CAAC;QACD,uCAAuC;QACvC,kDAAkD;QAClD,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC;YACZ,SAAS,CAAC,eAAe,CAAC,EAAE,CAAC;QACjC,CAAC,CAAC,CAAC;QACH,wCAAwC;QACxC,SAAS,CAAC,SAAS,CAAC,OAAO,CAAC,UAAC,OAAO;YAChC,gBAAQ,CAAC,OAAO,EAAE,iCAAyB,CAAC,CAAC;YAE7C,MAAM,CAAC,GAAG,CAAC,OAAO,EAAE,UAAU,EAAE,UAAC,CAAC;gBAC9B,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,mBAAmB,CAAC,CAAC,CAAC;oBACzB,SAAS,CAAC,OAAO,EAAE,CAAC;gBACxB,CAAC;YACL,CAAC,CAAC,CAAC;QACP,CAAC,CAAC,CAAC;QAEH,MAAM,CAAC,SAAS,CAAC,SAAS,CAAC;IAC/B,CAAC;IACE,8BAAU,GAA0B;QAC3C,EAAE,IAAI,EAAE,gBAAS,EAAE,IAAI,EAAE,CAAC;oBACtB,QAAQ,EAAE,cAAc;iBAC3B,EAAG,EAAE;KACL,CAAC;IACF,kBAAkB;IACX,kCAAc,GAAmE,cAAM,OAAA;QAC9F,EAAC,IAAI,EAAE,kBAAW,GAAG;QACrB,EAAC,IAAI,EAAE,uBAAgB,GAAG;QAC1B,EAAC,IAAI,EAAE,8BAAc,GAAG;QACxB,EAAC,IAAI,EAAE,aAAM,GAAG;KACf,EAL6F,CAK7F,CAAC;IACK,kCAAc,GAA2C;QAChE,cAAc,EAAE,CAAC,EAAE,IAAI,EAAE,YAAK,EAAE,EAAE;KACjC,CAAC;IACF,0BAAC;CA1DD,AA0DC,IAAA;AA1DY,kDAAmB;AA6DhC;IAAA;IASA,CAAC;IATsC,2BAAU,GAA0B;QAC3E,EAAE,IAAI,EAAE,eAAQ,EAAE,IAAI,EAAE,CAAC;oBACrB,YAAY,EAAE,CAAC,mBAAmB,CAAC;oBACnC,OAAO,EAAE,CAAC,mBAAmB,CAAC;iBACjC,EAAG,EAAE;KACL,CAAC;IACF,kBAAkB;IACX,+BAAc,GAAmE,cAAM,OAAA,EAC7F,EAD6F,CAC7F,CAAC;IACF,uBAAC;CATD,AASC,IAAA;AATY,4CAAgB","file":"template.js","sourceRoot":"","sourcesContent":["/*!\n * devextreme-angular\n * Version: 17.2.4\n * Build date: Wed Dec 13 2017\n *\n * Copyright (c) 2012 - 2017 Developer Express Inc. ALL RIGHTS RESERVED\n *\n * This software may be modified and distributed under the terms\n * of the MIT license. See the LICENSE file in the root of the project for details.\n *\n * https://github.com/DevExpress/devextreme-angular\n */\n\n/* tslint:disable:use-input-property-decorator */\r\n\r\nimport {\r\n    Directive,\r\n    NgModule,\r\n    TemplateRef,\r\n    ViewContainerRef,\r\n    Input,\r\n    NgZone\r\n} from '@angular/core';\r\n\r\nimport { DxTemplateHost } from './template-host';\r\nimport { addClass, getElement } from './utils';\r\nimport * as events from 'devextreme/events';\r\n\r\nexport const DX_TEMPLATE_WRAPPER_CLASS = 'dx-template-wrapper';\r\n\r\nexport class RenderData {\r\n    model: any;\r\n    index: number;\r\n    container: any;\r\n}\r\n\r\n\r\nexport class DxTemplateDirective {\r\n    \r\n    set dxTemplateOf(value) {\r\n        this.name = value;\r\n    };\r\n    name: string;\r\n\r\n    constructor(private templateRef: TemplateRef<any>,\r\n        private viewContainerRef: ViewContainerRef,\r\n        templateHost: DxTemplateHost,\r\n        private ngZone: NgZone) {\r\n        templateHost.setTemplate(this);\r\n    }\r\n\r\n    render(renderData: RenderData) {\r\n        let childView = this.viewContainerRef.createEmbeddedView(this.templateRef, {\r\n            '$implicit': renderData.model,\r\n            index: renderData.index\r\n        });\r\n        let container = getElement(renderData.container);\r\n        if (renderData.container) {\r\n            childView.rootNodes.forEach((element) => {\r\n                container.appendChild(element);\r\n            });\r\n        }\r\n        // =========== WORKAROUND =============\r\n        // https://github.com/angular/angular/issues/12243\r\n        this.ngZone.run(() => {\r\n            childView['detectChanges']();\r\n        });\r\n        // =========== /WORKAROUND =============\r\n        childView.rootNodes.forEach((element) => {\r\n            addClass(element, DX_TEMPLATE_WRAPPER_CLASS);\r\n\r\n            events.one(element, 'dxremove', (e) => {\r\n                if (!e._angularIntegration) {\r\n                    childView.destroy();\r\n                }\r\n            });\r\n        });\r\n\r\n        return childView.rootNodes;\r\n    }\r\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\r\n    selector: '[dxTemplate]'\r\n}, ] },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: TemplateRef, },\n{type: ViewContainerRef, },\n{type: DxTemplateHost, },\n{type: NgZone, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'dxTemplateOf': [{ type: Input },],\n};\n}\r\n\r\n\r\nexport class DxTemplateModule { static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\r\n    declarations: [DxTemplateDirective],\r\n    exports: [DxTemplateDirective]\r\n}, ] },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\r\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}