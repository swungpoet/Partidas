{"version":3,"sources":["utils.ts"],"names":[],"mappings":";AAAA;;;;;;;;;;;GAWG;;AAEH,kBAAyB,OAAY,EAAE,IAAY;IAC/C,EAAE,CAAC,CAAC,OAAO,CAAC,QAAQ,KAAK,CAAC,CAAC,CAAC,CAAC;QACzB,EAAE,CAAC,CAAC,OAAO,CAAC,SAAS,CAAC,CAAC,CAAC;YACpB,OAAO,CAAC,SAAS,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;QAChC,CAAC;QAAC,IAAI,CAAC,CAAC;YACJ,OAAO,CAAC,SAAS,GAAG,OAAO,CAAC,SAAS,GAAG,OAAO,CAAC,SAAS,GAAG,GAAG,GAAG,IAAI,GAAG,IAAI,CAAC;QAClF,CAAC;IAEL,CAAC;AACL,CAAC;AATD,4BASC;AAAA,CAAC;AAEF,kBAAyB,OAAY,EAAE,IAAY;IAC/C,IAAI,MAAM,CAAC;IAEX,EAAE,CAAC,CAAC,OAAO,CAAC,SAAS,CAAC,CAAC,CAAC;QACpB,MAAM,GAAG,OAAO,CAAC,SAAS,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC;IAC9C,CAAC;IAAC,IAAI,CAAC,CAAC;QACJ,MAAM,GAAG,OAAO,CAAC,SAAS,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;IAC7D,CAAC;IAED,MAAM,CAAC,MAAM,CAAC;AAClB,CAAC;AAVD,4BAUC;AAAA,CAAC;AAEF,oBAA2B,OAAY;IACnC,MAAM,CAAC,OAAO,CAAC,GAAG,GAAG,OAAO,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,OAAO,CAAC;AAClD,CAAC;AAFD,gCAEC;AAAA,CAAC;AAEF,uBAA8B,OAAY;IACtC,IAAI,IAAI,GAAG,UAAU,CAAC,OAAO,CAAC,EAC1B,UAAU,GAAG,IAAI,IAAI,IAAI,CAAC,UAAU,CAAC;IACrC,EAAE,CAAC,CAAC,UAAU,CAAC,CAAC,CAAC;QACb,UAAU,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC;IACjC,CAAC;AACT,CAAC;AAND,sCAMC;AAAA,CAAC","file":"utils.js","sourceRoot":"","sourcesContent":["/*!\n * devextreme-angular\n * Version: 17.2.4\n * Build date: Wed Dec 13 2017\n *\n * Copyright (c) 2012 - 2017 Developer Express Inc. ALL RIGHTS RESERVED\n *\n * This software may be modified and distributed under the terms\n * of the MIT license. See the LICENSE file in the root of the project for details.\n *\n * https://github.com/DevExpress/devextreme-angular\n */\n\nexport function addClass(element: any, name: string) {\r\n    if (element.nodeType === 1) {\r\n        if (element.classList) {\r\n            element.classList.add(name);\r\n        } else {\r\n            element.className = element.className ? element.className + ' ' + name : name;\r\n        }\r\n\r\n    }\r\n};\r\n\r\nexport function hasClass(element: any, name: string) {\r\n    let result;\r\n\r\n    if (element.classList) {\r\n        result = element.classList.contains(name);\r\n    } else {\r\n        result = element.className.split(' ').indexOf(name) >= 0;\r\n    }\r\n\r\n    return result;\r\n};\r\n\r\nexport function getElement(element: any) {\r\n    return element.get ? element.get(0) : element;\r\n};\r\n\r\nexport function removeElement(element: any) {\r\n    let node = getElement(element),\r\n        parentNode = node && node.parentNode;\r\n        if (parentNode) {\r\n            parentNode.removeChild(node);\r\n        }\r\n};\r\n"]}