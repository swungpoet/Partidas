/*!
 * devextreme-angular
 * Version: 17.2.4
 * Build date: Wed Dec 13 2017
 *
 * Copyright (c) 2012 - 2017 Developer Express Inc. ALL RIGHTS RESERVED
 *
 * This software may be modified and distributed under the terms
 * of the MIT license. See the LICENSE file in the root of the project for details.
 *
 * https://github.com/DevExpress/devextreme-angular
 */
import { ElementRef, NgZone, OnDestroy, EventEmitter, OnChanges, DoCheck, SimpleChanges, QueryList } from '@angular/core';
import DevExpress from 'devextreme/bundles/dx.all';
import DxList from 'devextreme/ui/list';
import { DxComponent } from '../core/component';
import { DxTemplateHost } from '../core/template-host';
import { NestedOptionHost } from '../core/nested-option';
import { WatcherHelper } from '../core/watcher-helper';
import { IterableDifferHelper } from '../core/iterable-differ-helper';
import { DxiItemComponent } from './nested/item-dxi';
import { DxiMenuItemComponent } from './nested/menu-item-dxi';
/**
 * The List is a widget that represents a collection of items in a scrollable list.
 */
export declare class DxListComponent extends DxComponent implements OnDestroy, OnChanges, DoCheck {
    private _watcherHelper;
    private _idh;
    instance: DxList;
    /**
     * Specifies the shortcut key that sets focus on the widget.
     */
    accessKey: string;
    /**
     * Specifies whether or not the widget changes its state when interacting with a user.
     */
    activeStateEnabled: boolean;
    /**
     * Specifies whether or not an end user can delete list items.
     */
    allowItemDeleting: boolean;
    /**
     * Specifies whether or not an end user can reorder list items.
     */
    allowItemReordering: boolean;
    /**
     * undefined
     */
    autoPagingEnabled: any;
    /**
     * A Boolean value specifying whether to enable or disable the bounce-back effect.
     */
    bounceEnabled: boolean;
    /**
     * Specifies whether or not an end-user can collapse groups.
     */
    collapsibleGroups: boolean;
    /**
     * A data source used to fetch data to be displayed by the widget.
     */
    dataSource: DevExpress.data.DataSource | DevExpress.data.DataSourceOptions | string | Array<string | DevExpress.ui.CollectionWidgetItemTemplate>;
    /**
     * Specifies whether the widget responds to user interaction.
     */
    disabled: boolean;
    /**
     * Specifies the attributes to be attached to the widget's root element.
     */
    elementAttr: any;
    /**
     * Specifies whether the widget can be focused using keyboard navigation.
     */
    focusStateEnabled: boolean;
    /**
     * Specifies whether data items should be grouped.
     */
    grouped: boolean;
    /**
     * The template to be used for rendering item groups. Specifies a custom template for a group caption.
     */
    groupTemplate: any;
    /**
     * Specifies the widget's height.
     */
    height: number | Function | string;
    /**
     * Specifies text for a hint that appears when a user pauses on the widget.
     */
    hint: string;
    /**
     * Specifies whether the widget changes its state when a user pauses on it.
     */
    hoverStateEnabled: boolean;
    /**
     * Specifies whether or not to show the loading panel when the DataSource bound to the widget is loading data.
     */
    indicateLoading: boolean;
    /**
     * Specifies the way a user can delete items from the list.
     */
    itemDeleteMode: string;
    /**
     * The time period in milliseconds before the onItemHold event is raised.
     */
    itemHoldTimeout: number;
    /**
     * An array of items displayed by the widget.
     */
    items: Array<string | any | {
        badge?: string;
        disabled?: boolean;
        html?: string;
        key?: string;
        showChevron?: boolean;
        template?: any;
        text?: string;
        visible?: boolean;
    }>;
    /**
     * Specifies a custom template for an item.
     */
    itemTemplate: any;
    /**
     * Specifies which data field provides keys for widget items.
     */
    keyExpr: Function | string;
    /**
     * Specifies the array of items for a context menu called for a list item.
     */
    menuItems: Array<any | {
        action?: Function;
        text?: string;
    }>;
    /**
     * Specifies whether an item context menu is shown when a user holds or swipes an item.
     */
    menuMode: string;
    /**
     * The text displayed on the button used to load the next page from the data source.
     */
    nextButtonText: string;
    /**
     * The text or HTML markup displayed by the widget if the item collection is empty.
     */
    noDataText: string;
    /**
     * Specifies the text shown in the pullDown panel, which is displayed when the list is scrolled to the bottom.
     */
    pageLoadingText: string;
    /**
     * Specifies whether the next page is loaded when a user scrolls the widget to the bottom or when the "next" button is clicked.
     */
    pageLoadMode: string;
    /**
     * Specifies the text displayed in the pullDown panel when the list is pulled below the refresh threshold.
     */
    pulledDownText: string;
    /**
     * Specifies the text shown in the pullDown panel while the list is being pulled down to the refresh threshold.
     */
    pullingDownText: string;
    /**
     * A Boolean value specifying whether or not the widget supports the "pull down to refresh" gesture.
     */
    pullRefreshEnabled: boolean;
    /**
     * Specifies the text displayed in the pullDown panel while the list is being refreshed.
     */
    refreshingText: string;
    /**
     * Switches the widget to a right-to-left representation.
     */
    rtlEnabled: boolean;
    /**
     * A Boolean value specifying if the list is scrolled by content.
     */
    scrollByContent: boolean;
    /**
     * A Boolean value specifying if the list is scrolled using the scrollbar.
     */
    scrollByThumb: boolean;
    /**
     * A Boolean value specifying whether to enable or disable list scrolling.
     */
    scrollingEnabled: boolean;
    /**
     * Configures the search panel.
     */
    searchEditorOptions: DevExpress.ui.dxTextBoxOptions;
    /**
     * Specifies whether the search panel is visible.
     */
    searchEnabled: boolean;
    /**
     * Specifies a data object's field name or an expression whose value is compared to the search string.
     */
    searchExpr: Function | Array<Function>;
    /**
     * Specifies whether the widget finds entries that contain your search string or entries that only start with it.
     */
    searchMode: string;
    /**
     * Specifies the current search string.
     */
    searchValue: string;
    /**
     * Specifies the mode in which all items are selected.
     */
    selectAllMode: string;
    /**
     * Specifies an array of currently selected item keys.
     */
    selectedItemKeys: Array<any>;
    /**
     * An array of currently selected item objects.
     */
    selectedItems: Array<any>;
    /**
     * Specifies item selection mode.
     */
    selectionMode: string;
    /**
     * undefined
     */
    showNextButton: any;
    /**
     * Specifies when the widget shows the scrollbar.
     */
    showScrollbar: string;
    /**
     * Specifies whether or not to display controls used to select list items.
     */
    showSelectionControls: boolean;
    /**
     * Specifies the number of the element when the Tab key is used for navigating.
     */
    tabIndex: number;
    /**
     * Specifies whether or not the widget uses native scrolling.
     */
    useNativeScrolling: boolean;
    /**
     * Specifies whether the widget is visible.
     */
    visible: boolean;
    /**
     * Specifies the widget's width.
     */
    width: number | Function | string;
    /**
     * A handler for the contentReady event. Executed when the widget's content is ready. This handler may be executed multiple times during the widget's lifetime depending on the number of times its content changes.
     */
    onContentReady: EventEmitter<any>;
    /**
     * A handler for the disposing event. Executed when the widget is removed from the DOM using the remove(), empty(), or html() jQuery methods only.
     */
    onDisposing: EventEmitter<any>;
    /**
     * A handler for the groupRendered event.
     */
    onGroupRendered: EventEmitter<any>;
    /**
     * A handler for the initialized event. Executed only once, after the widget is initialized.
     */
    onInitialized: EventEmitter<any>;
    /**
     * A handler for the itemClick event.
     */
    onItemClick: EventEmitter<any>;
    /**
     * A handler for the itemContextMenu event.
     */
    onItemContextMenu: EventEmitter<any>;
    /**
     * A handler for the itemDeleted event.
     */
    onItemDeleted: EventEmitter<any>;
    /**
     * A handler for the itemDeleting event. Executed before an item is deleted from the data source.
     */
    onItemDeleting: EventEmitter<any>;
    /**
     * A handler for the itemHold event.
     */
    onItemHold: EventEmitter<any>;
    /**
     * A handler for the itemRendered event.
     */
    onItemRendered: EventEmitter<any>;
    /**
     * A handler for the itemReordered event.
     */
    onItemReordered: EventEmitter<any>;
    /**
     * A handler for the itemSwipe event.
     */
    onItemSwipe: EventEmitter<any>;
    /**
     * A handler for the optionChanged event. Executed after an option of the widget is changed.
     */
    onOptionChanged: EventEmitter<any>;
    /**
     * A handler for the pageLoading event.
     */
    onPageLoading: EventEmitter<any>;
    /**
     * A handler for the pullRefresh event.
     */
    onPullRefresh: EventEmitter<any>;
    /**
     * A handler for the scroll event.
     */
    onScroll: EventEmitter<any>;
    /**
     * A handler for the selectAllValueChanged event.
     */
    onSelectAllValueChanged: EventEmitter<any>;
    /**
     * A handler for the selectionChanged event. Raised after an item is selected or unselected.
     */
    onSelectionChanged: EventEmitter<any>;
    /**
     * A handler for the ${optionName}Change event.
     */
    accessKeyChange: EventEmitter<string>;
    /**
     * A handler for the ${optionName}Change event.
     */
    activeStateEnabledChange: EventEmitter<boolean>;
    /**
     * A handler for the ${optionName}Change event.
     */
    allowItemDeletingChange: EventEmitter<boolean>;
    /**
     * A handler for the ${optionName}Change event.
     */
    allowItemReorderingChange: EventEmitter<boolean>;
    /**
     * A handler for the ${optionName}Change event.
     */
    autoPagingEnabledChange: EventEmitter<any>;
    /**
     * A handler for the ${optionName}Change event.
     */
    bounceEnabledChange: EventEmitter<boolean>;
    /**
     * A handler for the ${optionName}Change event.
     */
    collapsibleGroupsChange: EventEmitter<boolean>;
    /**
     * A handler for the ${optionName}Change event.
     */
    dataSourceChange: EventEmitter<DevExpress.data.DataSource | DevExpress.data.DataSourceOptions | string | Array<string | DevExpress.ui.CollectionWidgetItemTemplate>>;
    /**
     * A handler for the ${optionName}Change event.
     */
    disabledChange: EventEmitter<boolean>;
    /**
     * A handler for the ${optionName}Change event.
     */
    elementAttrChange: EventEmitter<any>;
    /**
     * A handler for the ${optionName}Change event.
     */
    focusStateEnabledChange: EventEmitter<boolean>;
    /**
     * A handler for the ${optionName}Change event.
     */
    groupedChange: EventEmitter<boolean>;
    /**
     * A handler for the ${optionName}Change event.
     */
    groupTemplateChange: EventEmitter<any>;
    /**
     * A handler for the ${optionName}Change event.
     */
    heightChange: EventEmitter<number | Function | string>;
    /**
     * A handler for the ${optionName}Change event.
     */
    hintChange: EventEmitter<string>;
    /**
     * A handler for the ${optionName}Change event.
     */
    hoverStateEnabledChange: EventEmitter<boolean>;
    /**
     * A handler for the ${optionName}Change event.
     */
    indicateLoadingChange: EventEmitter<boolean>;
    /**
     * A handler for the ${optionName}Change event.
     */
    itemDeleteModeChange: EventEmitter<string>;
    /**
     * A handler for the ${optionName}Change event.
     */
    itemHoldTimeoutChange: EventEmitter<number>;
    /**
     * A handler for the ${optionName}Change event.
     */
    itemsChange: EventEmitter<Array<string | any | {
        badge?: string;
        disabled?: boolean;
        html?: string;
        key?: string;
        showChevron?: boolean;
        template?: any;
        text?: string;
        visible?: boolean;
    }>>;
    /**
     * A handler for the ${optionName}Change event.
     */
    itemTemplateChange: EventEmitter<any>;
    /**
     * A handler for the ${optionName}Change event.
     */
    keyExprChange: EventEmitter<Function | string>;
    /**
     * A handler for the ${optionName}Change event.
     */
    menuItemsChange: EventEmitter<Array<any | {
        action?: Function;
        text?: string;
    }>>;
    /**
     * A handler for the ${optionName}Change event.
     */
    menuModeChange: EventEmitter<string>;
    /**
     * A handler for the ${optionName}Change event.
     */
    nextButtonTextChange: EventEmitter<string>;
    /**
     * A handler for the ${optionName}Change event.
     */
    noDataTextChange: EventEmitter<string>;
    /**
     * A handler for the ${optionName}Change event.
     */
    pageLoadingTextChange: EventEmitter<string>;
    /**
     * A handler for the ${optionName}Change event.
     */
    pageLoadModeChange: EventEmitter<string>;
    /**
     * A handler for the ${optionName}Change event.
     */
    pulledDownTextChange: EventEmitter<string>;
    /**
     * A handler for the ${optionName}Change event.
     */
    pullingDownTextChange: EventEmitter<string>;
    /**
     * A handler for the ${optionName}Change event.
     */
    pullRefreshEnabledChange: EventEmitter<boolean>;
    /**
     * A handler for the ${optionName}Change event.
     */
    refreshingTextChange: EventEmitter<string>;
    /**
     * A handler for the ${optionName}Change event.
     */
    rtlEnabledChange: EventEmitter<boolean>;
    /**
     * A handler for the ${optionName}Change event.
     */
    scrollByContentChange: EventEmitter<boolean>;
    /**
     * A handler for the ${optionName}Change event.
     */
    scrollByThumbChange: EventEmitter<boolean>;
    /**
     * A handler for the ${optionName}Change event.
     */
    scrollingEnabledChange: EventEmitter<boolean>;
    /**
     * A handler for the ${optionName}Change event.
     */
    searchEditorOptionsChange: EventEmitter<DevExpress.ui.dxTextBoxOptions>;
    /**
     * A handler for the ${optionName}Change event.
     */
    searchEnabledChange: EventEmitter<boolean>;
    /**
     * A handler for the ${optionName}Change event.
     */
    searchExprChange: EventEmitter<Function | Array<Function>>;
    /**
     * A handler for the ${optionName}Change event.
     */
    searchModeChange: EventEmitter<string>;
    /**
     * A handler for the ${optionName}Change event.
     */
    searchValueChange: EventEmitter<string>;
    /**
     * A handler for the ${optionName}Change event.
     */
    selectAllModeChange: EventEmitter<string>;
    /**
     * A handler for the ${optionName}Change event.
     */
    selectedItemKeysChange: EventEmitter<Array<any>>;
    /**
     * A handler for the ${optionName}Change event.
     */
    selectedItemsChange: EventEmitter<Array<any>>;
    /**
     * A handler for the ${optionName}Change event.
     */
    selectionModeChange: EventEmitter<string>;
    /**
     * A handler for the ${optionName}Change event.
     */
    showNextButtonChange: EventEmitter<any>;
    /**
     * A handler for the ${optionName}Change event.
     */
    showScrollbarChange: EventEmitter<string>;
    /**
     * A handler for the ${optionName}Change event.
     */
    showSelectionControlsChange: EventEmitter<boolean>;
    /**
     * A handler for the ${optionName}Change event.
     */
    tabIndexChange: EventEmitter<number>;
    /**
     * A handler for the ${optionName}Change event.
     */
    useNativeScrollingChange: EventEmitter<boolean>;
    /**
     * A handler for the ${optionName}Change event.
     */
    visibleChange: EventEmitter<boolean>;
    /**
     * A handler for the ${optionName}Change event.
     */
    widthChange: EventEmitter<number | Function | string>;
    itemsChildren: QueryList<DxiItemComponent>;
    menuItemsChildren: QueryList<DxiMenuItemComponent>;
    constructor(elementRef: ElementRef, ngZone: NgZone, templateHost: DxTemplateHost, _watcherHelper: WatcherHelper, _idh: IterableDifferHelper, optionHost: NestedOptionHost);
    protected _createInstance(element: any, options: any): DxList;
    ngOnDestroy(): void;
    ngOnChanges(changes: SimpleChanges): void;
    ngDoCheck(): void;
    _updateOption(name: string, value: any): void;
}
export declare class DxListModule {
}
