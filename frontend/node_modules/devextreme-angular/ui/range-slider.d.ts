/*!
 * devextreme-angular
 * Version: 17.2.4
 * Build date: Wed Dec 13 2017
 *
 * Copyright (c) 2012 - 2017 Developer Express Inc. ALL RIGHTS RESERVED
 *
 * This software may be modified and distributed under the terms
 * of the MIT license. See the LICENSE file in the root of the project for details.
 *
 * https://github.com/DevExpress/devextreme-angular
 */
import { ElementRef, NgZone, OnDestroy, EventEmitter, AfterContentInit, OnChanges, DoCheck, SimpleChanges } from '@angular/core';
import DxRangeSlider from 'devextreme/ui/range_slider';
import { DxValidatorComponent } from './validator';
import { ControlValueAccessor } from '@angular/forms';
import { DxComponent } from '../core/component';
import { DxTemplateHost } from '../core/template-host';
import { NestedOptionHost } from '../core/nested-option';
import { WatcherHelper } from '../core/watcher-helper';
import { IterableDifferHelper } from '../core/iterable-differ-helper';
/**
 * The RangeSlider is a widget that allows an end user to choose a range of numeric values.
 */
export declare class DxRangeSliderComponent extends DxComponent implements OnDestroy, AfterContentInit, ControlValueAccessor, OnChanges, DoCheck {
    private _watcherHelper;
    private _idh;
    instance: DxRangeSlider;
    validator: DxValidatorComponent;
    /**
     * Specifies the shortcut key that sets focus on the widget.
     */
    accessKey: string;
    /**
     * Specifies whether or not the widget changes its state when interacting with a user.
     */
    activeStateEnabled: boolean;
    /**
     * Specifies whether the widget responds to user interaction.
     */
    disabled: boolean;
    /**
     * Specifies the attributes to be attached to the widget's root element.
     */
    elementAttr: any;
    /**
     * The right edge of the interval currently selected using the range slider.
     */
    end: number;
    /**
     * The value to be assigned to the name attribute of the underlying `` element.
     */
    endName: string;
    /**
     * Specifies whether the widget can be focused using keyboard navigation.
     */
    focusStateEnabled: boolean;
    /**
     * Specifies the widget's height.
     */
    height: number | Function | string;
    /**
     * Specifies text for a hint that appears when a user pauses on the widget.
     */
    hint: string;
    /**
     * Specifies whether the widget changes its state when a user pauses on it.
     */
    hoverStateEnabled: boolean;
    /**
     * Specifies whether the editor's value is valid.
     */
    isValid: boolean;
    /**
     * Specifies the step by which a handle moves when a user presses Page Up or Page Down.
     */
    keyStep: number;
    /**
     * Configures the labels displayed at the min and max values.
     */
    label: any;
    /**
     * The maximum value the widget can accept.
     */
    max: number;
    /**
     * The minimum value the widget can accept.
     */
    min: number;
    /**
     * A Boolean value specifying whether or not the widget is read-only.
     */
    readOnly: boolean;
    /**
     * Switches the widget to a right-to-left representation.
     */
    rtlEnabled: boolean;
    /**
     * Specifies whether to highlight the selected range.
     */
    showRange: boolean;
    /**
     * The left edge of the interval currently selected using the range slider.
     */
    start: number;
    /**
     * The value to be assigned to the name attribute of the underlying `` element.
     */
    startName: string;
    /**
     * Specifies the step by which the widget's value changes when a user drags a handler.
     */
    step: number;
    /**
     * Specifies the number of the element when the Tab key is used for navigating.
     */
    tabIndex: number;
    /**
     * Configures a tooltip.
     */
    tooltip: any;
    /**
     * Specifies information on the validation error when using a custom validation engine. Should be changed at runtime along with the isValid option.
     */
    validationError: any;
    /**
     * Specifies how the message about the validation rules that are not satisfied by this editor's value is displayed.
     */
    validationMessageMode: string;
    /**
     * Specifies the currently selected value.
     */
    value: Array<number>;
    /**
     * Specifies whether the widget is visible.
     */
    visible: boolean;
    /**
     * Specifies the widget's width.
     */
    width: number | Function | string;
    /**
     * A handler for the contentReady event. Executed when the widget's content is ready. This handler may be executed multiple times during the widget's lifetime depending on the number of times its content changes.
     */
    onContentReady: EventEmitter<any>;
    /**
     * A handler for the disposing event. Executed when the widget is removed from the DOM using the remove(), empty(), or html() jQuery methods only.
     */
    onDisposing: EventEmitter<any>;
    /**
     * A handler for the initialized event. Executed only once, after the widget is initialized.
     */
    onInitialized: EventEmitter<any>;
    /**
     * A handler for the optionChanged event. Executed after an option of the widget is changed.
     */
    onOptionChanged: EventEmitter<any>;
    /**
     * A handler for the valueChanged event.
     */
    onValueChanged: EventEmitter<any>;
    /**
     * A handler for the ${optionName}Change event.
     */
    accessKeyChange: EventEmitter<string>;
    /**
     * A handler for the ${optionName}Change event.
     */
    activeStateEnabledChange: EventEmitter<boolean>;
    /**
     * A handler for the ${optionName}Change event.
     */
    disabledChange: EventEmitter<boolean>;
    /**
     * A handler for the ${optionName}Change event.
     */
    elementAttrChange: EventEmitter<any>;
    /**
     * A handler for the ${optionName}Change event.
     */
    endChange: EventEmitter<number>;
    /**
     * A handler for the ${optionName}Change event.
     */
    endNameChange: EventEmitter<string>;
    /**
     * A handler for the ${optionName}Change event.
     */
    focusStateEnabledChange: EventEmitter<boolean>;
    /**
     * A handler for the ${optionName}Change event.
     */
    heightChange: EventEmitter<number | Function | string>;
    /**
     * A handler for the ${optionName}Change event.
     */
    hintChange: EventEmitter<string>;
    /**
     * A handler for the ${optionName}Change event.
     */
    hoverStateEnabledChange: EventEmitter<boolean>;
    /**
     * A handler for the ${optionName}Change event.
     */
    isValidChange: EventEmitter<boolean>;
    /**
     * A handler for the ${optionName}Change event.
     */
    keyStepChange: EventEmitter<number>;
    /**
     * A handler for the ${optionName}Change event.
     */
    labelChange: EventEmitter<any>;
    /**
     * A handler for the ${optionName}Change event.
     */
    maxChange: EventEmitter<number>;
    /**
     * A handler for the ${optionName}Change event.
     */
    minChange: EventEmitter<number>;
    /**
     * A handler for the ${optionName}Change event.
     */
    readOnlyChange: EventEmitter<boolean>;
    /**
     * A handler for the ${optionName}Change event.
     */
    rtlEnabledChange: EventEmitter<boolean>;
    /**
     * A handler for the ${optionName}Change event.
     */
    showRangeChange: EventEmitter<boolean>;
    /**
     * A handler for the ${optionName}Change event.
     */
    startChange: EventEmitter<number>;
    /**
     * A handler for the ${optionName}Change event.
     */
    startNameChange: EventEmitter<string>;
    /**
     * A handler for the ${optionName}Change event.
     */
    stepChange: EventEmitter<number>;
    /**
     * A handler for the ${optionName}Change event.
     */
    tabIndexChange: EventEmitter<number>;
    /**
     * A handler for the ${optionName}Change event.
     */
    tooltipChange: EventEmitter<any>;
    /**
     * A handler for the ${optionName}Change event.
     */
    validationErrorChange: EventEmitter<any>;
    /**
     * A handler for the ${optionName}Change event.
     */
    validationMessageModeChange: EventEmitter<string>;
    /**
     * A handler for the ${optionName}Change event.
     */
    valueChange: EventEmitter<Array<number>>;
    /**
     * A handler for the ${optionName}Change event.
     */
    visibleChange: EventEmitter<boolean>;
    /**
     * A handler for the ${optionName}Change event.
     */
    widthChange: EventEmitter<number | Function | string>;
    /**
     * undefined
     */
    onBlur: EventEmitter<any>;
    change(_: any): void;
    touched: () => void;
    constructor(elementRef: ElementRef, ngZone: NgZone, templateHost: DxTemplateHost, _watcherHelper: WatcherHelper, _idh: IterableDifferHelper, optionHost: NestedOptionHost);
    protected _createInstance(element: any, options: any): DxRangeSlider;
    writeValue(value: any): void;
    setDisabledState(isDisabled: boolean): void;
    registerOnChange(fn: (_: any) => void): void;
    registerOnTouched(fn: () => void): void;
    _createWidget(element: any): void;
    ngOnDestroy(): void;
    ngOnChanges(changes: SimpleChanges): void;
    ngDoCheck(): void;
    _updateOption(name: string, value: any): void;
    ngAfterContentInit(): void;
}
export declare class DxRangeSliderModule {
}
